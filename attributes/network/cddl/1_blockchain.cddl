; tag::types[]
; A message in a block.
; `request` type is defined in the MANY protocol's CDDL. It should include the protected
; header, payload and signature. A blockchain MAY drop the unprotected header to save
; on block size.
message = bstr .cbor request

; A block query, which can contain either a hash, index (or height) or time.
; This targets a single block. Since multiple blocks might have been created
; at the same time, this cannot include a time value (use a ranged block
; query instead).
single-block-query = {
    ; A hash of a block. The length and algorithm is implementation specific.
    0 => bstr
    ; A specific height.
    // 1 => uint
}

; A block query over a range of height or time. This cannot be a hash or
; specific height (use `blockchain.block` for specific height/hash).
range-block-query =
    ; Height range.
    { 1 => range<uint> }
    ; Time value or time range.
    / { 2 => range<time> }

; A block identifier, as a way to target a block. This matches loosely the fields
; of single-block-query.
block-identifier = {
    ; Hash of the block.
    0 => bstr,

    ; Height of the block. This cannot be 0, unless the block is the genesis
    ; block (see genesis-block-identifier).
    1 => uint,
}

; A genesis block identifier. This should be used as the parent of a
genesis-block-identifier = {
    0 => bstr .size 0,
    1 => 0,
}

; A query for a single transaction.
single-transaction-query =
    ; A transaction hash.
    { 0 => bstr }
    ; A block + transaction index.
    / { 1 => [ single-block-query, uint ] }

; A unique identifier for the transaction on this network.
transaction-identifier = {
    ; A hash value of the transaction.
    0 => bstr,
}

; A transaction, which should be a message. Some metadata can be added.
transaction = {
    ; The identifier of the transaction.
    0 => transaction-identifier,

    ; The content of the transaction. This should be a MANY request.
    ; If this field is missing, use the `block.request` endpoint.
    ; If this field is there but empty (not a request), the transaction is
    ; empty or metadata-only (implementation specific).
    ? 1 => bstr .cbor request / bstr .size 0,

    ; The response for the transaction. This should be a MANY response.
    ; If this field is missing, use the `block.response` endpoint.
    ; If this field is empty, the transaction is empty or metadata-only
    ; (implementation specific).
    ? 2 => bstr .cbor response / bstr .size 0,

    ; Additional fields are okay here as metadata, as long as keys are strings.
    tstr => any,
}

; A block. Blocks contain an array of transactions, and a parent block.
; Blocks MUST be immutable and cacheable. If two block-identifier are the same,
; the blocks their query MUST be the same as well (including meta-data).
block = {
    ; The block identifier.
    0 => block-identifier,

    ; The parent block identifier. If this is a genesis-block-identifier, this
    ; specific block is the oldest in the chain. Request a genesis block
    ; identifier should return a block unknown error.
    ; If this field is missing, then the parent is not part of the retained
    ; blocks, and cannot be queried. It is _not_ a genesis block.
    ? 1 => block-identifier / genesis-block-identifier,

    ; The application hash value after this block was executed.
    ? 2 => bstr,

    ; Time the block was created.
    3 => time,

    ; Total number of transactions.
    4 => uint,

    ; Transactions / Messages sent through this block. If the response is larger
    ; than the maximum message size, the transaction content might be skipped.
    ; The server MAY provide transaction hashes instead as a separate key.
    (
        5 => [ * transaction ]
        //
        6 => [ * bstr ],
    )

    ; Additional fields are okay here as metadata, keys MUST be strings.
    * tstr => any,
}
; end::types[]

; tag::info[]
; The blockchain.info endpoint returns information about the current state of this
; blockchain.
blockchain.info@param = ()

blockchain.info@return = {
    ; The latest block identifier.
    0 => block-identifier,

    ; If a server with a state is running behind the blockchain, this is the
    ; hash of the state.
    ? 1 => bstr,

    ; The earliest height that is queryable from the blockchain. A blockchain is
    ; allowed to remove old block information. If this information is missing,
    ; the blockchain might not know ahead of time and should be queried.
    ? 2 => uint,
}
; end::info[]

; tag::block[]
; The blockchain.block endpoint returns a single block from the blockchain.
blockchain.block@param = {
    ; A single block query.
    0 => single-block-query,
}

blockchain.block@return = {
    ; The block being requested.
    0 => block,
}
; end::block[]

; tag::list[]
; The blockchain.list endpoint query the list of blocks and returns multiple blocks with their
; summaries.
blockchain.list@param = {
    ; Maximum number of blocks to return. The server can still limit the number of
    ; blocks it returns if this number is high.
    ? 0 => uint,

    ; Whether or not to show the last events or the first ones found (ordering).
    ; The default behaviour is left to the server implementation.
    ; Ordering is done by block height.
    ? 1 => order,

    ; Block filter criteria.
    ? 2 => range-block-query,
}

blockchain.list@return = {
    ; Latest height of the blockchain (currently).
    0 => uint,

    ; List of blocks found. This might be capped to the size of a response and return less blocks
    ; than requested or transaction hashes instead of content.
    1 => [ * block ],
}
; end::list[]

; tag::transaction[]
; The blockchain.transaction endpoint returns a single transaction by its identifier.
blockchain.transaction@param = {
    0 => single-transaction-query,
}

blockchain.transaction@return = {
    0 => transaction,
}
; end::transaction[]

; tag::request[]
; The blockchain.request endpoint returns a request of a transaction by its identifier.
blockchain.request@param = {
    0 => single-transaction-query,
}

blockchain.request@return = {
    0 => bstr .cbor request / bstr .size 0,
}
; end::request[]

; tag::response[]
; The blockchain.response endpoint returns a response of a transaction by its identifier.
blockchain.response@param = {
    0 => single-transaction-query,
}

blockchain.response@return = {
    0 => bstr .cbor response / bstr .size 0,
}
; end::response[]
