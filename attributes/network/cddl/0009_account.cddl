; tag::types[]
; An account address.
account-address = non-anonymous-address

; Features might extend this.
account-role /= "owner"

; The attribute argument contains a list of all account features supported by
; the server.
account@attribute-arg = [ * uint ]

account-feature-arg = any
account-feature = uint / [uint, * account-feature-arg]

event-info /= account-event-info-create
           /  account-event-info-set-description
           /  account-event-info-add-roles
           /  account-event-info-remove-roles
           /  account-event-info-disable
           /  account-event-info-add-features
event-type /= account-event-type-create
           /  account-event-type-set-description
           /  account-event-type-add-roles
           /  account-event-type-remove-roles
           /  account-event-type-disable
           /  account-event-type-add-features

account-event-type-create             = [9, 0]
account-event-type-set-description    = [9, 1]
account-event-type-add-roles          = [9, 2]
account-event-type-remove-roles       = [9, 3]
account-event-type-disable            = [9, 4]
account-event-type-add-features       = [9, 5]

account-event-info-create = {
    0 => account-event-type-create,
    1 => non-anonymous-address,     ; Account address
    ? 2 => tstr,                    ; Description
    3 => {
        * non-anonymous-address => [ * account-role ],
    },                              ; List of initial roles, including default ones.
    4 => [ 1* account-feature ],    ; Features
}
account-event-info-set-description = {
    0 => account-event-type-set-description,
    1 => non-anonymous-address,     ; Account address.
    2 => tstr,                      ; Description
}
account-event-info-add-roles = {
    0 => account-event-type-add-roles,
    1 => non-anonymous-address,     ; Account address.
    2 => {
        * non-anonymous-address => [ * account-role ],
    },                              ; List of roles added.
}
account-event-info-remove-roles = {
    0 => account-event-type-remove-roles,
    1 => non-anonymous-address,     ; Account address.
    2 => {
        * non-anonymous-address => [ * account-role ],
    },                              ; List of roles removed.
}
account-event-info-disable = {
    0 => account-event-type-disable,
    1 => non-anonymous-address,     ; Account address.
    ? 2 => reason<u64>,             ; The reason this was deleted/disabled.
}
account-event-info-add-features = {
    0 => account-event-type-add-features,
    1 => non-anonymous-address,     ; Account address.
    2 => {
        * non-anonymous-address => [ * account-role ],
    },                              ; List of roles to add.
    3 => [ 1* account-feature ],    ; New features added.
}
; end::types[]

; tag::create[]
; Create a new account.
account.create@param = {
    ; A name or description of the account. This does not have to be unique.
    ; The server is welcome to limit the name of an account in any ways it sees
    ; fit.
    ? 0 => tstr,

    ; An optional initial list of roles. The sender of this message will be
    ; included in the list of owners by default, even if the sender is listed
    ; in this list.
    ; The server MUST return an error if any role is not supported by any
    ; feature included in the account.
    ? 1 => {
        * non-anonymous-address => [ * account-role ],
    },

    ; Required list of features and their arguments.
    ; The server MUST return an error if no features are selected; an account
    ; without features doesn't do anything and is an error.
    ; The server MUST return an error if a combination of features on an
    ; account is unsupported.
    2 => [ 1* account-feature ],
}
account.create@return = {
    ; The account address. Use this to contact the account directly.
    0 => account-address,
}
; end::create[]

; tag::setDescription[]
; Sets the description of an account.
account.setDescription@param = {
    ; The address of the account.
    0 => account-address,

    ; The new name or description.
    1 => tstr,
}

account.setDescription@return = ()
; end::setDescription[]

; tag::listRoles[]
; List all the roles available for an account, based on its features.
account.listRoles@param = {
    ; The account to list identities available.
    0 => account-address,
}

account.listRoles@return = {
    ; The list of roles available for identities.
    0 => [ * account-role ],
}
; end::listRoles[]

; tag::getRoles[]
; List the roles of an address for an account.
account.getRoles@param = {
    ; The account to get the roles of.
    0 => account-address,

    ; The address to get the roles from.
    1 => non-anonymous-address / [ * non-anonymous-address ],
}

account.getRoles@return = {
    ; The list of roles, per address.
    0 => {
        address => [ * account-role ],
    }
}
; end::getRoles[]

; tag::addRoles[]
; Add roles to an address related to the account. Adding a role that is already
; set to an address does nothing. The only role that must be defined all the
; time is the "owner". Other roles can be added by features and can be listed by
; calling the `account.listRoles` endpoint.
account.addRoles@param = {
    ; The account to add the role to.
    0 => account-address,

    ; A map of address with roles to add. These roles will be added to the
    ; address, not replacing the ones it currently have.
    1 => {
        1* non-anonymous-address => [ * account-role ],
    }
}
account.addRoles@return = ()
; end::addRoles[]

; tag::removeRoles[]
; Remove roles from an address. If the role isn't set, this will do nothing.
account.removeRoles@param = {
    ; The account to remove the roles from.
    0 => account-address,

    ; A map of address with roles to remove from them.
    1 => {
        1* non-anonymous-address => [ * account-role ],
    }
}
account.removeRoles@return = ()
; end::removeRoles[]

; tag::info[]
; Get the information of an account. Some information might be missing if the
; server desires it. For example, the server might restrict which identities
; can have the list of owners.
account.info@param = {
    ; The address of the account to request the information of.
    0 => account-address,
}
account.info@return = {
    ; The name or description of the account.
    ? 0 => tstr,

    ; The list of roles for the account.
    1 => {
        1* non-anonymous-address => [ * account-role ],
    },

    ; The list of features and their argument.
    2 => [ 1* account-feature ],

    ; Whether this account is still enabled. A server MAY choose to disable
    ; accounts for some reasons (or instead of deleting), and MAY choose to
    ; put an error record here instead of `true`. This field is not part of
    ; the regular error code space and should only use application-specific
    ; codes (positive codes).
    ; If this field is omitted, this account is enabled.
    ? 3 => bool / reason<uint>,
}
; end::info[]

; tag::disable[]
; Disable or delete an account. Its address cannot be reused.
; The server MUST return an error if the sender does not have the `"owner"` role
; for this account.
; The server MAY choose to fully delete the account (in which case any calls
; to `account.info` will return an error), or disable the account.
account.disable@param = {
    0 => account-address,
}
account.disable@return = ()
; end::disable[]

; tag::addFeatures[]
; Add features and roles to an account, in one atomic call.
; The roles added by this call can only come from the new features
; added in this call.
; The server MUST return an error if roles added by this call aren't available
; to the features listed.
; The server MAY return an error if adding features to an account is not
; supported.
account.addFeatures@param = {
    ; The account to add features to.
    0 => account-address,

    ; List of additional roles to add.
    ? 1 => {
        * non-anonymous-address => [ * account-role ],
    }

    ; List of features to add and their arguments.
    ; The server MUST return an error if a feature is already available on the
    ; account.
    ; The server MUST return an error if a combination of features on an
    ; account is unsupported.
    2 => [ 1* account-feature ],
}
account.addFeatures@return = ()
; end::addFeatures[]
