; tag::types[]
; A token symbol which is its name.
; A symbol is an address, and CAN be an anonymous address. It is
; unique across all networks. The given string name of a symbol is not
; unique, though, and cannot be resolved using this attribute (a
; separate resolver attribute is necessary).
ledger-symbol = address

; An amount of tokens can be either an infinite uint or a regular one
; for simplicity. The networks CAN use either when serializing, but
; MUST accept both when doing transactions.
ledger-amount = biguint / uint

; A single logo that can be shown for representing the token. A token can
; have a set of logos that can represent visually its identity.
single-visual-token-logo = single-visual-token-logo-unicode
                         / single-visual-token-logo-image

; A unicode logo.
; For Bitcoin this would be U+20BF ("â‚¿").
single-visual-token-logo-unicode = {
    ; Type.
    0 => 0,

    ; Unicode code point. This isn't limited to a single glyph but can be
    ; truncated or transformed by the server or the frontend.
    1 => tstr,
}

; A binary image.
single-visual-token-logo-image = {
    ; Type.
    0 => 1,

    ; Content-type, following the IANA list. This should be part of the
    ; image section.
    ; See https://www.iana.org/assignments/media-types/media-types.xhtml#image
    1 => tstr,

    ; Binary content of the image.
    2 => bstr,

    ; Optional height and width, in pixels.
    ? 3 => [ uint, uint ],

    ; Optional DPI.
    ? 4 => uint,
}

; A logo that can be shown visually. The server might add limits to how big
; a logo can be (both in height x width, and on byte size).
; A frontend should pick the first one that can be represented in its
; interface, so this should be an ordered set in decrementing order of
; importance. For example, a terminal would look for the first unicode character
; in the set, while a UI on a phone might want a small assets for lists and a
; big asset for detailed views.
visual-token-logo = [ * single-visual-token-logo ]

; A summary information for a token. This does not contain extended information
; which isn't needed in most cases.
token-info-summary = {
    ; A human readable name for the token. This is the full name of the token.
    ; e.g. Bitcoin would use "Bitcoin" here.
    0 => tstr,

    ; A human readable symbol for the token. This should be _short_ and can
    ; be limited by the server at creation. This should be unique to the
    ; ledger.
    ; e.g. Bitcoin would use "BTC" here.
    1 => tstr,

    ; Precision decimals. This is used to show how many tokens can be divided.
    ; It is recommended for the server to limit this number.
    ; e.g. Bitcoin would use 8.
    2 => uint,

    ; A transaction fee. A server can deny having no or too low of a transaction
    ; fee on new tokens or updates. The fee is in the token currency itself.
    ; Server can still deny transactions based on other criteria (such as
    ; imposing a ledger's native token as additional transaction fee).
    ; Servers can also clamp this value to assure a minimum transaction fee.
    3 => transaction-fee,

    ; A memo, description of the token, information about it that can be
    ; human readable.
    ? 4 => memo,
}

; The supply of a token on a given ledger.
token-info-supply = {
    ; The total supply for the token on this particular ledger.
    ; For Bitcoin, that would be ~19 million at the time of this writing.
    3 => uint,

    ; The circulating supply for the token on this particular ledger.
    ; For Bitcoin, that would also be ~19 million, but if there was a staking
    ; mechanism, that would be less, as those tokens are not burnt but
    ; frozen.
    4 => uint,

    ; The maximum supply for the token on this particular ledger.
    ; This is the maximum amount of tokens at any point in time, including
    ; in the far future, and should never change.
    ; If this is null, then the token has an infinite maximum supply.
    5 => uint / null,
}

; A full definition of a token, including its visual logo and any memo.
token-info = {
    ; The address of the token, used for referencing the token. This should
    ; be unique across all the MANYverse.
    0 => ledger-symbol,

    ; Summary information for the token.
    1 => token-info-summary,

    ; Supply information for the token.
    2 => token-info-supply,

    ; Owner of the token. If missing, the token has no owner.
    ? 3 => non-anonymous-address,

    ; A visual logo. If this is missing, a frontend should try to display
    ; something in exchange.
    ? 4 => visual-token-logo,
}

; Fees can be set for each symbols independently.
; If a symbol is missing (or empty map), transactions are free.
; If no fixed or percent fee is specified, transactions are free.
;
; Percents are fixed point over 2**32, so a value of 0x100000000
; would be 100% of fees.
;
; If both fixed and percent fees are specified, the calculation is
;     TOTAL = amount + fixed + (amount * percent / 2**32)
; Example:
;   A token has a fixed transfer rate of 1000, and a percent of
;   0x800000 (~0.195%).
;   A user who wants to transfer an amount of 5_000_000, would
;   need a balance over:
;     5000000 + 1000 + (5000000 * 0x800000 / 0x100000000)
;   Which is 5010765.625, rounded down to 5_010_765.
;   So a total of 10_765 tokens as fees.
transaction-fee = {
    ; Fixed fees for each transactions.
    ? 0 => ledger-amount,

    ; Percent fees of the actual transfer amount, rounded down
    ; if necessary.
    ? 1 => fixed-point-percent,
}

; Fees between two symbols.
conversion = {
    ; Default value is 1 for 1.
    ? 0 => conversion-rate,

    ; How much does it cost to convert between 2 symbols.
    ? 1 => conversion-fee,
}

; Conversion rate is a percent that will give
conversion-rate = fixed-point-percent
conversion-fee = transaction-fee

; A percent based on 32 bits. The percent is fixed point over 32 bits,
; so 50% would be 0x80000000, and 1% 0x28F5C28.
fixed-point-percent = uint
; end::types[]

; tag::info[]
; Info endpoint.
ledger.info@param = ()
ledger.info@return = (ledger-info)

ledger-info = {
    ; DO NOT USE. Burnt for backward compatibility.
    ; To get the list of supported tokens, use the map below.
    ? 0 => null,

    ; Hash value of the ledger state. If two ledgers have the same hashes,
    ; chances are they have the same balances on the same accounts (with
    ; some risk of collision).
    ; This can include configuration, depending on the implementation.
    ; The actual hashing method and size of the hash is left to the
    ; implementation.
    1 => bstr,

    ; Transfer fees for each symbols, between accounts.
    ; TODO: not implemented.
    2 => {
        ledger-symbol => transaction-fee,
    },

    ; Conversion rates and fees between symbols.
    ; TODO: not implemented.
    3 => {
        [ledger-symbol, ledger-symbol] => conversion,
    },

    ; DO NOT USE. Burnt for backward compatibility.
    ? 4 => null,

    ; Summary of the information for the token symbols.
    ; These names are local only, and are only guaranteed to be unique on this
    ; specific ledger.
    5 => {
        ledger-symbol => token-info-summary,
    }
}
; end::info[]

; tag::balance[]
ledger.balance@param = {
    ; Account's address. If not specified, will use the message sender.
    ? 0 => non-anonymous-address,

    ; Symbol to check (or list of symbols). Symbols will be missing from
    ; the output if their balance is 0. If this is an empty array or
    ; omitted, all symbols with a balance for the account will be returned.
    ? 1 => ledger-symbol // [* ledger-symbol],
}

; Return value for "ledger.balance".
; Contains
ledger.balance@return = {
    ; Balances as a record of Symbol => Amount.
    ; Balances of zero might not be listed here.
    0 => {
        * ledger-symbol => ledger-amount,
    },
}
; end::balance[]
