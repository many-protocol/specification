; tag::types[]
event-type-put = [7, 0]
event-type-disable = [7, 1]
event-type-transfer = [7, 2]

event-type /= event-type-put
           /  event-type-disable
           /  event-type-transfer

event-info-put = {
    0 => event-type-put,
    1 => bstr,                    ; Key
    2 => bstr,                    ; Value
    3 => non-anonymous-address    ; Key owner
}

event-info-disable = {
    0 => event-type-disable,
    1 => bstr,                    ; Key
    2 => reason<u64>              ; The reason this was deleted/disabled.
}

event-info-transfer = {
    0 => event-type-transfer,
    1 => bstr,                    ; Key
    2 => non-anonymous-address    ; Previous owner
    3 => non-anonymous-address    ; The new key owner
}

event-info /= event-info-put
           /  event-info-disable
           /  event-info-transfer
; end::types[]

; tag::put[]
kvstore.put@param = {
    ; Key.
    0 => bstr,

    ; Value
    1 => bstr,

    ; Alternative key owner
    ; The sender must be related to this address, e.g., account, etc.
    ? 2 => non-anonymous-address,
}

kvstore.put@return = ()
; end::put[]

; tag::disable[]
; Disable or delete an KEY/VALUE.
; The KEY/VALUE cannot be reused, except by its owner
; The server MUST return an error if the sender does not have the `"owner"` role or the `canKvStoreDisable` role for the given key
; The server MAY choose to fully delete the KEY and its VALUE
kvstore.disable@param = {
    ; Key.
    0 => bstr,

    ; Alternative key owner
    ; The sender must be related to this address, e.g., account, subresource, etc.
    ? 1 => non-anonymous-address,
}

kvstore.disable@return = ()
; end::disable[]

; tag::transfer[]
; Transfer ownership of a key.
kvstore.transfer@param = {
    ; Key.
    0 => bstr,

    ; Alternative key owner
    ; The sender must be related to this address, e.g., account, subresource, etc.
    ? 1 => non-anonymous-address,

    ; New owner. This is required.
    2 => non-anonymous-address,
}

kvstore.transfer@return = ()
; end::transfer[]
