; Generic types defined for CDDL.
; Sorting order. This only matters if a call uses a maximum number of transactions
; as they will be returned in the order and stopped.
; For example, if a call lists ALL transactions, but the server returns only 100,
; using an ASCENDING order returns the first 100, while a DESCENDING order returns
; the last 100.
order = (
    indeterminate /
    ascending /
    descending
)
indeterminate = 0
ascending = 1
descending = 2

; A bound, either upper or lower, serialized.
bound<T> =
    ; Unbounded.
    []
    ; Inclusive bound.
    / [0, T]
    ; Exclusive bound.
    / [1, T]

; A Range of scalar. Must specify both bounds, but can specify any bound to being
; unbounded. If omitted, the value is unbounded.
range<T> = {
    ; Lower bound.
    ? 0 => bound<T>,
    ; Upper bound.
    ? 1 => bound<T>,
}

; An attribute related index, which can include sub-attributes or IDs recursively.
attribute-related-index     = attribute-id / sub-attribute-related-index

; A sub-attribute related index. Sub-indices can also be custom.
sub-attribute-related-index = [attribute-id, uint]
                            / [attribute-id, attribute-related-index]

; A memo contains a human readable portion and/or a machine readable portion.
; The machine readable portion is expected to be CBOR, though it could be a
; byte array containing another format.
; A memo can contain multiple entries, as some of them might be formatted in
; different ways, or contain additional data.
; The memo itself CANNOT be empty and MUST contain at least one entry.
memo = [ + (tstr / (bstr .cbor any)) ]

; A burnt field is any valid CBOR value, but is used to indicate that this
; field should not be used anymore. It is normally kept as a backward compatible
; placeholder. Always should be used with an optional key in a map.
burnt<T> = T
